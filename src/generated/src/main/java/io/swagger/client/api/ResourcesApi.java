/*
 * Sam
 * Workbench identity and access management. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccessPolicyMembership;
import io.swagger.client.model.AccessPolicyResponseEntry;
import io.swagger.client.model.ErrorReport;
import io.swagger.client.model.ResourceAndAccessPolicy;
import io.swagger.client.model.ResourceType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourcesApi {
    private ApiClient apiClient;

    public ResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourcesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createResource
     * @param resourceTypeName Type of resource to create (required)
     * @param resourceId Id of resource to create, must be unique for all resources of given type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createResourceCall(String resourceTypeName, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/resource/{resourceTypeName}/{resourceId}"
            .replaceAll("\\{" + "resourceTypeName" + "\\}", apiClient.escapeString(resourceTypeName.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createResourceValidateBeforeCall(String resourceTypeName, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceTypeName' is set
        if (resourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'resourceTypeName' when calling createResource(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling createResource(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createResourceCall(resourceTypeName, resourceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new resource
     * 
     * @param resourceTypeName Type of resource to create (required)
     * @param resourceId Id of resource to create, must be unique for all resources of given type (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createResource(String resourceTypeName, String resourceId) throws ApiException {
        createResourceWithHttpInfo(resourceTypeName, resourceId);
    }

    /**
     * Create a new resource
     * 
     * @param resourceTypeName Type of resource to create (required)
     * @param resourceId Id of resource to create, must be unique for all resources of given type (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createResourceWithHttpInfo(String resourceTypeName, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = createResourceValidateBeforeCall(resourceTypeName, resourceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a new resource (asynchronously)
     * 
     * @param resourceTypeName Type of resource to create (required)
     * @param resourceId Id of resource to create, must be unique for all resources of given type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createResourceAsync(String resourceTypeName, String resourceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createResourceValidateBeforeCall(resourceTypeName, resourceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteResource
     * @param resourceTypeName Type of the resource (required)
     * @param resourceId Id of the resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteResourceCall(String resourceTypeName, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/resource/{resourceTypeName}/{resourceId}"
            .replaceAll("\\{" + "resourceTypeName" + "\\}", apiClient.escapeString(resourceTypeName.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteResourceValidateBeforeCall(String resourceTypeName, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceTypeName' is set
        if (resourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'resourceTypeName' when calling deleteResource(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling deleteResource(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteResourceCall(resourceTypeName, resourceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a resource
     * 
     * @param resourceTypeName Type of the resource (required)
     * @param resourceId Id of the resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteResource(String resourceTypeName, String resourceId) throws ApiException {
        deleteResourceWithHttpInfo(resourceTypeName, resourceId);
    }

    /**
     * Delete a resource
     * 
     * @param resourceTypeName Type of the resource (required)
     * @param resourceId Id of the resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteResourceWithHttpInfo(String resourceTypeName, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteResourceValidateBeforeCall(resourceTypeName, resourceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a resource (asynchronously)
     * 
     * @param resourceTypeName Type of the resource (required)
     * @param resourceId Id of the resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteResourceAsync(String resourceTypeName, String resourceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteResourceValidateBeforeCall(resourceTypeName, resourceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listResourcePolicies
     * @param resourceTypeName Type of resource (required)
     * @param resourceId Id of resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listResourcePoliciesCall(String resourceTypeName, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/resource/{resourceTypeName}/{resourceId}/policies"
            .replaceAll("\\{" + "resourceTypeName" + "\\}", apiClient.escapeString(resourceTypeName.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listResourcePoliciesValidateBeforeCall(String resourceTypeName, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceTypeName' is set
        if (resourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'resourceTypeName' when calling listResourcePolicies(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling listResourcePolicies(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listResourcePoliciesCall(resourceTypeName, resourceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List the policies for a resource
     * 
     * @param resourceTypeName Type of resource (required)
     * @param resourceId Id of resource (required)
     * @return List&lt;AccessPolicyResponseEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AccessPolicyResponseEntry> listResourcePolicies(String resourceTypeName, String resourceId) throws ApiException {
        ApiResponse<List<AccessPolicyResponseEntry>> resp = listResourcePoliciesWithHttpInfo(resourceTypeName, resourceId);
        return resp.getData();
    }

    /**
     * List the policies for a resource
     * 
     * @param resourceTypeName Type of resource (required)
     * @param resourceId Id of resource (required)
     * @return ApiResponse&lt;List&lt;AccessPolicyResponseEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AccessPolicyResponseEntry>> listResourcePoliciesWithHttpInfo(String resourceTypeName, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = listResourcePoliciesValidateBeforeCall(resourceTypeName, resourceId, null, null);
        Type localVarReturnType = new TypeToken<List<AccessPolicyResponseEntry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the policies for a resource (asynchronously)
     * 
     * @param resourceTypeName Type of resource (required)
     * @param resourceId Id of resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listResourcePoliciesAsync(String resourceTypeName, String resourceId, final ApiCallback<List<AccessPolicyResponseEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listResourcePoliciesValidateBeforeCall(resourceTypeName, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AccessPolicyResponseEntry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listResourceTypes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listResourceTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/resourceTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listResourceTypesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listResourceTypesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists available resource types
     * 
     * @return List&lt;ResourceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ResourceType> listResourceTypes() throws ApiException {
        ApiResponse<List<ResourceType>> resp = listResourceTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Lists available resource types
     * 
     * @return ApiResponse&lt;List&lt;ResourceType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ResourceType>> listResourceTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listResourceTypesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ResourceType>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists available resource types (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listResourceTypesAsync(final ApiCallback<List<ResourceType>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listResourceTypesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ResourceType>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listResourcesAndPolicies
     * @param resourceTypeName Type of the resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listResourcesAndPoliciesCall(String resourceTypeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/resource/{resourceTypeName}"
            .replaceAll("\\{" + "resourceTypeName" + "\\}", apiClient.escapeString(resourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listResourcesAndPoliciesValidateBeforeCall(String resourceTypeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceTypeName' is set
        if (resourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'resourceTypeName' when calling listResourcesAndPolicies(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listResourcesAndPoliciesCall(resourceTypeName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List resources and policies for this resource for the caller
     * 
     * @param resourceTypeName Type of the resource (required)
     * @return List&lt;ResourceAndAccessPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ResourceAndAccessPolicy> listResourcesAndPolicies(String resourceTypeName) throws ApiException {
        ApiResponse<List<ResourceAndAccessPolicy>> resp = listResourcesAndPoliciesWithHttpInfo(resourceTypeName);
        return resp.getData();
    }

    /**
     * List resources and policies for this resource for the caller
     * 
     * @param resourceTypeName Type of the resource (required)
     * @return ApiResponse&lt;List&lt;ResourceAndAccessPolicy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ResourceAndAccessPolicy>> listResourcesAndPoliciesWithHttpInfo(String resourceTypeName) throws ApiException {
        com.squareup.okhttp.Call call = listResourcesAndPoliciesValidateBeforeCall(resourceTypeName, null, null);
        Type localVarReturnType = new TypeToken<List<ResourceAndAccessPolicy>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List resources and policies for this resource for the caller (asynchronously)
     * 
     * @param resourceTypeName Type of the resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listResourcesAndPoliciesAsync(String resourceTypeName, final ApiCallback<List<ResourceAndAccessPolicy>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listResourcesAndPoliciesValidateBeforeCall(resourceTypeName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ResourceAndAccessPolicy>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for overwritePolicy
     * @param resourceTypeName Type of resource (required)
     * @param resourceId Id of resource (required)
     * @param policyName Name of the policy (required)
     * @param policyCreate The details of the policy (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call overwritePolicyCall(String resourceTypeName, String resourceId, String policyName, AccessPolicyMembership policyCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policyCreate;
        
        // create path and map variables
        String localVarPath = "/api/resource/{resourceTypeName}/{resourceId}/policies/{policyName}"
            .replaceAll("\\{" + "resourceTypeName" + "\\}", apiClient.escapeString(resourceTypeName.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "policyName" + "\\}", apiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call overwritePolicyValidateBeforeCall(String resourceTypeName, String resourceId, String policyName, AccessPolicyMembership policyCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceTypeName' is set
        if (resourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'resourceTypeName' when calling overwritePolicy(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling overwritePolicy(Async)");
        }
        
        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling overwritePolicy(Async)");
        }
        
        // verify the required parameter 'policyCreate' is set
        if (policyCreate == null) {
            throw new ApiException("Missing the required parameter 'policyCreate' when calling overwritePolicy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = overwritePolicyCall(resourceTypeName, resourceId, policyName, policyCreate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Overwrite a policy on a resource
     * 
     * @param resourceTypeName Type of resource (required)
     * @param resourceId Id of resource (required)
     * @param policyName Name of the policy (required)
     * @param policyCreate The details of the policy (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> overwritePolicy(String resourceTypeName, String resourceId, String policyName, AccessPolicyMembership policyCreate) throws ApiException {
        ApiResponse<List<String>> resp = overwritePolicyWithHttpInfo(resourceTypeName, resourceId, policyName, policyCreate);
        return resp.getData();
    }

    /**
     * Overwrite a policy on a resource
     * 
     * @param resourceTypeName Type of resource (required)
     * @param resourceId Id of resource (required)
     * @param policyName Name of the policy (required)
     * @param policyCreate The details of the policy (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> overwritePolicyWithHttpInfo(String resourceTypeName, String resourceId, String policyName, AccessPolicyMembership policyCreate) throws ApiException {
        com.squareup.okhttp.Call call = overwritePolicyValidateBeforeCall(resourceTypeName, resourceId, policyName, policyCreate, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Overwrite a policy on a resource (asynchronously)
     * 
     * @param resourceTypeName Type of resource (required)
     * @param resourceId Id of resource (required)
     * @param policyName Name of the policy (required)
     * @param policyCreate The details of the policy (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call overwritePolicyAsync(String resourceTypeName, String resourceId, String policyName, AccessPolicyMembership policyCreate, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = overwritePolicyValidateBeforeCall(resourceTypeName, resourceId, policyName, policyCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resourceAction
     * @param resourceTypeName Type of resource to query (required)
     * @param resourceId Id of resource to query (required)
     * @param action Action to perform (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resourceActionCall(String resourceTypeName, String resourceId, String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/resource/{resourceTypeName}/{resourceId}/action/{action}"
            .replaceAll("\\{" + "resourceTypeName" + "\\}", apiClient.escapeString(resourceTypeName.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "action" + "\\}", apiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resourceActionValidateBeforeCall(String resourceTypeName, String resourceId, String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceTypeName' is set
        if (resourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'resourceTypeName' when calling resourceAction(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling resourceAction(Async)");
        }
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling resourceAction(Async)");
        }
        
        
        com.squareup.okhttp.Call call = resourceActionCall(resourceTypeName, resourceId, action, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query if requesting user may perform the action
     * 
     * @param resourceTypeName Type of resource to query (required)
     * @param resourceId Id of resource to query (required)
     * @param action Action to perform (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean resourceAction(String resourceTypeName, String resourceId, String action) throws ApiException {
        ApiResponse<Boolean> resp = resourceActionWithHttpInfo(resourceTypeName, resourceId, action);
        return resp.getData();
    }

    /**
     * Query if requesting user may perform the action
     * 
     * @param resourceTypeName Type of resource to query (required)
     * @param resourceId Id of resource to query (required)
     * @param action Action to perform (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> resourceActionWithHttpInfo(String resourceTypeName, String resourceId, String action) throws ApiException {
        com.squareup.okhttp.Call call = resourceActionValidateBeforeCall(resourceTypeName, resourceId, action, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query if requesting user may perform the action (asynchronously)
     * 
     * @param resourceTypeName Type of resource to query (required)
     * @param resourceId Id of resource to query (required)
     * @param action Action to perform (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resourceActionAsync(String resourceTypeName, String resourceId, String action, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resourceActionValidateBeforeCall(resourceTypeName, resourceId, action, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resourceRoles
     * @param resourceTypeName Type of resource to query (required)
     * @param resourceId Id of resource to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resourceRolesCall(String resourceTypeName, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/resource/{resourceTypeName}/{resourceId}/roles"
            .replaceAll("\\{" + "resourceTypeName" + "\\}", apiClient.escapeString(resourceTypeName.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resourceRolesValidateBeforeCall(String resourceTypeName, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceTypeName' is set
        if (resourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'resourceTypeName' when calling resourceRoles(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling resourceRoles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = resourceRolesCall(resourceTypeName, resourceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query for the list of roles that the requesting user has on the resource
     * 
     * @param resourceTypeName Type of resource to query (required)
     * @param resourceId Id of resource to query (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> resourceRoles(String resourceTypeName, String resourceId) throws ApiException {
        ApiResponse<List<String>> resp = resourceRolesWithHttpInfo(resourceTypeName, resourceId);
        return resp.getData();
    }

    /**
     * Query for the list of roles that the requesting user has on the resource
     * 
     * @param resourceTypeName Type of resource to query (required)
     * @param resourceId Id of resource to query (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> resourceRolesWithHttpInfo(String resourceTypeName, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = resourceRolesValidateBeforeCall(resourceTypeName, resourceId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query for the list of roles that the requesting user has on the resource (asynchronously)
     * 
     * @param resourceTypeName Type of resource to query (required)
     * @param resourceId Id of resource to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resourceRolesAsync(String resourceTypeName, String resourceId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resourceRolesValidateBeforeCall(resourceTypeName, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
